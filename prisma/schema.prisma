// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  notes         Note[]
  designSystems DesignSystem[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  FontFile  FontFile[]
}

model Note {
  id       String  @id @default(uuid())
  title    String
  content  String?
  isFolder Boolean @default(false)
  parentId String?

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([parentId])
}

model DesignSystem {
  id       String  @id @default(uuid())
  name     String
  isActive Boolean @default(false)

  primaryColor      String
  secondaryColor    String
  backgroundColor   String
  overlayBackground String
  overlayBorder     String
  textPrimary       String
  accentColor       String
  textAccentColor   String

  primaryFont   String
  primaryFontUrl String?
  secondaryFont String
  secondaryFontUrl String?

  editorBackground String

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model FontFile {
  id       String @id @default(uuid())
  name     String
  fileName String
  fileUrl  String @db.Text

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}
